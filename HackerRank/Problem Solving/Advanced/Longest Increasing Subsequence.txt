#include <bits/stdc++.h>

using namespace std;

// Complete the longestIncreasingSubsequence function below.
int longestIncreasingSubsequence(vector<int> arr) {
    int size  = arr.size();
     vector<int>tail(size);
     int length = 1; // points ahead of the last element's index
     tail[0]=arr[0];

     for(int i=1;i<arr.size();i++){
         if(arr[i]>tail[length-1]){
             tail[length++]=arr[i];
         }
         else{
             auto it = find(tail.begin(),tail.begin() + length,arr[i]);
             if(it != tail.begin()+length){
                 continue;
              }
              else{
                  auto itr = upper_bound(tail.begin(),tail.begin()+length,arr[i]);
                  *itr = arr[i];
              }
         }
     }
     return length;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item;
        cin >> arr_item;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        arr[i] = arr_item;
    }

    int result = longestIncreasingSubsequence(arr);

    fout << result << "\n";

    fout.close();

    return 0;
}
