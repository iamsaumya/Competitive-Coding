#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the longestCommonSubsequence function below.
vector<int> longestCommonSubsequence(vector<int> a, vector<int> b) {
       
       vector<vector<int>>vec(a.size()+1,vector<int>(b.size()+1));
       for(int i=0;i<=a.size();i++) vec[i][0] = 0;
       for(int j=0;j<=b.size();j++) vec[0][j] = 0;

       for(int i=1;i<=a.size();i++){
           for(int j=1;j<=b.size();j++){
               if(a[i-1]==b[j-1]){
                   vec[i][j] = 1 + vec[i-1][j-1];
               }
               else{
                   vec[i][j] = max(vec[i-1][j], vec[i][j-1]);
               }
           }
       }
       int ans = vec[a.size()][b.size()];
       vector<int>ans1;
       int tempi = a.size();
       int tempj = b.size();
       while(ans1.size()!=ans){
           if(a[tempi-1]==b[tempj-1]){
               ans1.push_back(a[tempi-1]);
               tempi--;
               tempj--;
           }
           else{
               if(vec[tempi-1][tempj]>vec[tempi][tempj-1]){
                   tempi--;
               }
               else {
                   tempj--;
               }
           }
       }
      reverse(ans1.begin(),ans1.end());
    return ans1;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nm_temp;
    getline(cin, nm_temp);

    vector<string> nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    string a_temp_temp;
    getline(cin, a_temp_temp);

    vector<string> a_temp = split_string(a_temp_temp);

    vector<int> a(n);

    for (int i = 0; i < n; i++) {
        int a_item = stoi(a_temp[i]);

        a[i] = a_item;
    }

    string b_temp_temp;
    getline(cin, b_temp_temp);

    vector<string> b_temp = split_string(b_temp_temp);

    vector<int> b(m);

    for (int i = 0; i < m; i++) {
        int b_item = stoi(b_temp[i]);

        b[i] = b_item;
    }

    vector<int> result = longestCommonSubsequence(a, b);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << " ";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
