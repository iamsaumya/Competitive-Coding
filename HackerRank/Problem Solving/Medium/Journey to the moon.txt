#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

class Graph{
     map<int,list<int>>adj;
     int V;
     public:
      Graph( int a){
          V = a;
      }
      void addEdge(int u, int v, bool bidir = true){
          adj[u].push_back(v);
          if(bidir){
              adj[v].push_back(u);
          }
      }
      
      void dfshelper(int node,bool visited[], int &countrysize){
          visited[node] =  true;
          countrysize++;

          for(auto neighbour : adj[node]){
              if(!visited[neighbour]){
                   dfshelper(neighbour,visited,countrysize);
              }
          }
      }

     long long int dfsmoon(int n){
          bool *visited =  new bool[V];
          for(int i = 0;i<V;i++) *visited = false;
          //cout<<V<<endl;
          long long int ans = ((long long int)n*(long long int)(n-1));
         // cout<<ans<<endl;
          ans= ans/2;
          //cout<<ans<<endl;
          for(int i = 0;i<V;i++){
              int countrysize = 0;
              if(!visited[i]){
                  dfshelper(i,visited,countrysize);
                  countrysize = countrysize * (countrysize-1)/2;
                  //cout<<countrysize<<endl;
              }
             ans = ans -  countrysize;
          }
         return ans;
      }
};
// Complete the journeyToMoon function below.
long long int journeyToMoon(int n, vector<vector<int>> astronaut) {
   Graph g(n);

   for(int i = 0;i<astronaut.size();i++){
       vector<int>temp = astronaut[i];
       g.addEdge(temp[0],temp[1]);
   }

   long long int ans =  g.dfsmoon(n);
   return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string np_temp;
    getline(cin, np_temp);

    vector<string> np = split_string(np_temp);

    int n = stoi(np[0]);

    int p = stoi(np[1]);

    vector<vector<int>> astronaut(p);
    for (int i = 0; i < p; i++) {
        astronaut[i].resize(2);

        for (int j = 0; j < 2; j++) {
            cin >> astronaut[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    long long int result = journeyToMoon(n, astronaut);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
